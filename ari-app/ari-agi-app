#!/usr/bin/env python3
# -*- coding: utf-8 -*-
__author__ = 'visarev'

import socket
import socketserver
import configparser
import logging
import logging.config
import asyncio
import psycopg2
import aiopg
from panoramisk import fast_agi
from pprint import pprint
from ari_app.agi_handlers import *
from ari_app.DBConnector import DBConnector,DBType
from ari_app.app_helpers import *
import argparse

CONFIG_DIR = "/etc/ari-app/"

LOGCONF = {
            'version': 1,
            'disable_existing_loggers': False,
            'formatters': {
                'default': {
                    'format': '%(asctime)s %(levelname)s %(name)s.%(funcName)s => %(message)s'
                },
            },
            'handlers': {
                'console': {
                    'class': 'logging.StreamHandler',
                },
                'file': {
                    'class': 'logging.FileHandler',
                    'filename': '/var/log/ari-agi-app.log',
                    'mode': 'a',
                    'formatter': 'default',
                }
            },
            'root': {
                'level': 'DEBUG',
                'handlers': ['console','file']
            },
}


logger = logging.getLogger(__name__)
logging.config.dictConfig(LOGCONF)


# ----------------------------------------------------------------------------------------------------------------------
async def init(app):
    loop = app.loop
    db = await init_db(app['config'], loop)
    if db is not None:
        app['db'] = db
    else:
        raise Exception

# ----------------------------------------------------------------------------------------------------------------------
async def close_con(app):
    await close_db(app['db'])

# ----------------------------------------------------------------------------------------------------------------------
if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("-c", "--config", help="Config dir", required=True)
    args = parser.parse_args()
    CONFIG_DIR  = args.config
    config = None
    #tasks = []
    try:
        config = configparser.ConfigParser()
        config.read(CONFIG_DIR+"/agi-app.conf")
        logging.getLogger().setLevel(config.get("general", "log_level"))
        nlu_config = configparser.ConfigParser()
        nlu_config.read(CONFIG_DIR + "/nlu.conf")
    except Exception:
        logger.exception("Can`t read config file")
        exit(1)

    try:
        loop = asyncio.get_event_loop()

        host = config["server"]["host"]
        port = int(config["server"]["port"])

        app = fast_agi.Application(loop=loop)

        app.add_route('script_proc', script_proc)
        app.add_route('originate_hangup', originate_hangup)
        app.add_route('check',check)
        app['config'] = config
        app['nlu_conf'] = nlu_config

        coro = asyncio.start_server(app.handler, host, port, loop=loop)
        loop.run_until_complete(init(app))

        server = loop.run_until_complete(coro)

        try:
            logger.info("======== Running on http://{ip}:{port} ========".format(ip=host,port=port))
            loop.run_forever()
        except KeyboardInterrupt:
            pass
        # Close the server
        finally:
            server.close()
            # for task in tasks:
            #     task.cancel()
            loop.run_until_complete(server.wait_closed())
            loop.run_until_complete(close_con(app))
            loop.close()

    except Exception:
        logger.exception("Can't start server")
