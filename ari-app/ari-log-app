#!/usr/bin/env python3
# -*- coding: utf-8 -*-
__author__ = 'visarev'

import logging.config
import time
import argparse

from ari_app.app_helpers import *

CONFIG_DIR = "/etc/ari-app/"
LOGCONF = {
            'version': 1,
            'disable_existing_loggers': False,
            'formatters': {
                'default': {
                    'format': '%(asctime)s %(levelname)s %(name)s.%(funcName)s => %(message)s'
                },
            },
            'handlers': {
                'console': {
                    'class': 'logging.StreamHandler',
                },
                'file': {
                    'class': 'logging.FileHandler',
                    'filename': '/var/log/ari-log-app.log',
                    'mode': 'a',
                    'formatter': 'default',
                }
            },
            'root': {
                'level': 'DEBUG',
                'handlers': ['console','file']
            },
}

logging.config.dictConfig(LOGCONF)
logger = logging.getLogger(__name__)

GLOB_INDX = 0
LOGS = {}

# ----------------------------------------------------------------------------------------------------------------------
def get_id():
    global GLOB_INDX
    if GLOB_INDX > 10000000:
        GLOB_INDX = 0
    GLOB_INDX += 1
    return GLOB_INDX

# ----------------------------------------------------------------------------------------------------------------------
async def init(app):
    loop = app.loop
    db = await init_db(app['config'],loop)
    if db is not None:
        app['db'] = db
    else:
        raise Exception

# ----------------------------------------------------------------------------------------------------------------------
async def start_background_tasks(app):
    app['logs_processing'] = app.loop.create_task(logs_processing(app))
    app['garbage_collector'] = app.loop.create_task(garbage_collector())

# ----------------------------------------------------------------------------------------------------------------------
async def close_con(app):
    app['logs_processing'].cancel()
    app['garbage_collector'].cancel()
    if "db" in app:
        await close_db(app['db'])
# ----------------------------------------------------------------------------------------------------------------------
async def garbage_collector():
    global LOGS
    logger.info("Start garbage_collector task")
    while True:
        date = time.time()
        for log in LOGS:
            if date - log["date"] > 600:
                del LOGS[log]
        await asyncio.sleep(1200)

# ----------------------------------------------------------------------------------------------------------------------
async def logs_processing(app):
    log_task_queue = app["log_task_queue"]
    global LOGS
    logger.info("Start logs processing task")
    while True:
        dbproc = await app['db'].dbproc()
        while log_task_queue.qsize() > 0:
            try:
                task = await log_task_queue.get()
                logger.debug("Proc log task: task_id = {}, service = {}, service_id = {}".format(task["id"],
                                                                                                 task["service"], task["service_id"]))
                log, err = await dbproc.get_log(task["service"], task["service_id"])
                LOGS[task["id"]] = (log,err)
            except Exception:
                logger.exception("logs_processing")
        await asyncio.sleep(0.01)

# ----------------------------------------------------------------------------------------------------------------------
async def wait_for_log(id):
    """
    :param id: task id from get_id()
    :return: (log, err) -- log - JSON log object, err = None if no error, else error text
    """
    global LOGS
    start_time = time.time()
    while True:
        if id in LOGS:
            log = LOGS.pop(id)
            if log[1] is None:
                return log[0],None
            else:
                return {},log[1]
        await asyncio.sleep(0.001)
        if time.time() - start_time > 60:
            return {}, "get log timeout"

# ----------------------------------------------------------------------------------------------------------------------
async def get_log_handler(request):
    try:
        app = request.app
        query = urllib.parse.parse_qs(request.query_string)
        if not "service" in query and not "task_id" in query:
            return web.HTTPBadRequest(text="Can`t find fields: service or task_id")

        task = {}
        task["id"] = get_id()
        task["service"] = query["service"][0]
        task["service_id"] = query["task_id"][0]
        task["date"] = time.time()
        await app["log_task_queue"].put(task)
        logger.debug("Create log task: task_id = {}, service = {}, service_id = {}".format(task["id"],
                                                                                         task["service"],
                                                                                         task["service_id"]))
        log, err = await wait_for_log(task["id"])
        if err is None:
            return web.json_response(log)
        else:
            return web.HTTPInternalServerError(err)

    except Exception:
        logger.exception("Unknown Error")

    return web.HTTPInternalServerError("can`t get log")

# ----------------------------------------------------------------------------------------------------------------------
if __name__ == "__main__":
    app = web.Application()
    parser = argparse.ArgumentParser()
    parser.add_argument("-c", "--config", help="Config dir", required=True)
    args = parser.parse_args()
    CONFIG_DIR  = args.config
    try:
        config = configparser.ConfigParser()
        config.read(CONFIG_DIR+"/log-app.conf")
        app['config'] = config
        logging.getLogger().setLevel(config.get("general", "log_level"))
    except Exception:
        logger.exception("Can`t read config file")
        exit(1)
    try:
        app["log_task_queue"] = asyncio.Queue()
        app.router.add_get('/log',get_log_handler)
        app.on_startup.append(init)
        app.on_startup.append(start_background_tasks)
        app.on_cleanup.append(close_con)

        host=app['config']['server']['host']
        port=int(app['config']['server']['port'])
        web.run_app(app, host=host,port=port)
    except KeyboardInterrupt:
        app.shutdown()
        app.cleanup()
        pass
    except Exception:
        app.shutdown()
        app.cleanup()