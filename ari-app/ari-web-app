#!/usr/bin/env python3
# -*- coding: utf-8 -*-
__author__ = 'visarev'

from aiohttp import web
import configparser
import logging.config
from pprint import pprint
import re
import json
import asyncio
import urllib
from ari_app.DBConnector import DBConnector,DBType
import asterisk.manager
from asterisk.manager import  ManagerException
from ari_app.web_handlers import *
import os
from contextlib import suppress
from pprint import pformat
from panoramisk import Manager
from ari_app.AMIManager import AMIManager
import functools
import argparse
import time
from ari_app.app_helpers import *
from asyncio import CancelledError

CONFIG_DIR = "/etc/ari-app/"
LOGCONF = {
            'version': 1,
            'disable_existing_loggers': False,
            'formatters': {
                'default': {
                    'format': '%(asctime)s %(levelname)s %(name)s.%(funcName)s => %(message)s'
                },
            },
            'handlers': {
                'console': {
                    'class': 'logging.StreamHandler',
                },
                'file': {
                    'class': 'logging.FileHandler',
                    'filename': '/var/log/ari-web-app.log',
                    'mode': 'a',
                    'formatter': 'default',
                }
            },
            'root': {
                'level': 'INFO',
                'handlers': ['console','file']
            },
}

logging.config.dictConfig(LOGCONF)
logger = logging.getLogger(__name__)

ami_timestamp_re = re.compile("Val='([0-9]+\.[0-9]*)'")

# ----------------------------------------------------------------------------------------------------------------------
async def init_ami(app):
    try:
        conf = app['config']
        ami_section = conf['ami']
        host = ami_section['host']
        port = ami_section['port']
        user = ami_section['user']
        passwd = ami_section['pass']
        manager = AMIManager(loop=app.loop, host=host, port=port, username=user, secret=passwd,
                             forgetable_actions=('login','DBGet','Ping'))
        app['ami'] = manager
        await manager.connect()
        logger.info("successfully connect to Asterisk")
    except Exception:
        logger.exception("can`t connect to Asterisk")

# ----------------------------------------------------------------------------------------------------------------------
async def init(app):
    loop = app.loop
    await init_ami(app)
    db = await init_db(app['config'], loop)
    if db is not None:
        app['db'] = db
    else:
        raise Exception

# ----------------------------------------------------------------------------------------------------------------------
async def close_con(app):
    app['tasks_queue_processing'].cancel()
    await app['tasks_queue_processing']
    if "db" in app:
        await close_db(app['db'])
    if "ami" in app:
        await app["ami"].close()

# ----------------------------------------------------------------------------------------------------------------------
async def make_call(app, cdict, task_id):
    try:
        manager = app['ami']
        res = await manager.send_action(cdict)
        if "Response='Failure'" in str(res):
            raise Exception
    except:
        dbproc = await app['db'].dbproc()
        if dbproc:
            await dbproc.set_task_status(task_id, 'failed')
        logger.exception("tasks_processing: can`t connect to Asterisk")

# ----------------------------------------------------------------------------------------------------------------------
async def check_system_status(app):
    if 'self_check_time' in app['config']['general']:
        timeout = float(app['config']['general']['self_check_time'])
    else:
        timeout = 5
    await asyncio.sleep(3)
    while True:
        try:
            dbproc = await app['db'].dbproc()
            if dbproc:
                res = await dbproc.check_connection()
                if not res:
                    app["ari_status"]["error"] = "DB connection error"
                    continue
        except:
            app["ari_status"]["error"] ="DB connection error"
            continue
        try:
            manager = app['ami']
            cdict = {
                'Action': 'Originate',
                'Channel': 'Local/dummy@watchdog',
                'WaitTime': timeout,
                'Exten': 'check',
                'Context': 'watchdog',
                'Priority': 1,
                'Async': 'true'
            }
            if manager.connected:
                await manager.send_action(cdict)
            else:
                app["ari_status"]["error"] = "Asterisk connection failed"
                await asyncio.sleep(30)
                continue
        except:
            logger.exception("Can`t call watchdog")
            app["ari_status"]["error"] = "AMI check failed"
            await asyncio.sleep(30)
            continue
        await asyncio.sleep(0.2)
        try:
            cdict = {
                'Action': 'DBGet',
                'Family': 'CHECKER',
                'Key': 'CHECK_TIME'
            }
            if manager.connected:
                resp = await manager.send_action(cdict)
                if resp is None:
                    app["ari_status"]["error"] = "Asterisk connection failed"
                    continue
                agi_check_time = float(ami_timestamp_re.search(str(resp)).group(1))
                if agi_check_time is not None:
                    app["ari_status"]["agi_check_time"] = agi_check_time
            else:
                app["ari_status"]["error"] = "Asterisk connection failed"
                continue
        except:
            logger.exception("Can`t get CHECK_TIME")
            app["ari_status"]["error"] = "AMI check failed"
            continue
        if (time.time() - app["ari_status"]["agi_check_time"]) < timeout:
            app["ari_status"]["error"] = ""
        else:
            app["ari_status"]["error"] = "AGI check failed"
        await asyncio.sleep(timeout - 1)

# ----------------------------------------------------------------------------------------------------------------------
async def tasks_processing(app):
    logger.info("Start tasks_processing task")
    while True:
        try:
            task = await app["task_queue"].get()
            dbproc = await app['db'].dbproc()
            task_id, err = await dbproc.save_task(service_task_id=task["service_task_id"], service=task["service"], phone=task["phone"],
                                                  script=task["script"], formatted_script=task["formatted_script"], log_uri=task["log_uri"],
                                                  record_uri=task["record_uri"], host=task["host"])
            if err is None:
                try:

                    variables = {"TASK_ID": task_id, "SERVICE": task["service"],
                                 "SERVICE_TASK_ID": task["service_task_id"]}
                    cdict = {
                        'Action': 'Originate',
                        'Channel': 'Local/{}@local_context'.format(task["phone"].strip()),
                        'WaitTime': 40,
                        'Exten': 'ari',
                        'Context': 'ari_context',
                        'Priority': 1,
                        'Async': 'true',
                        'Variable': ['='.join(
                            (str(key), str(value))) for key, value in variables.items()]
                    }
                    asyncio.ensure_future(make_call(app,cdict,task_id))
                    logger.debug("manager.originate response: " + str(cdict))

                except ManagerException:
                    dbproc = await app['db'].dbproc()
                    if dbproc:
                        await dbproc.set_task_status(task_id, 'failed')
                    logger.exception("tasks_processing: can`t connect to Asterisk")
        except CancelledError:
            task.cancel()
            pass
        except Exception:
            logger.exception("tasks_processing")
        asyncio.sleep(0.01)

# ----------------------------------------------------------------------------------------------------------------------
async def start_background_tasks(app):
    app['tasks_queue_processing'] = app.loop.create_task(tasks_processing(app))
    app['check_system_status'] = app.loop.create_task(check_system_status(app))

# ----------------------------------------------------------------------------------------------------------------------
if __name__ == "__main__":
    app = web.Application()
    parser = argparse.ArgumentParser()
    parser.add_argument("-c", "--config", help="Config dir", required=True)
    args = parser.parse_args()
    CONFIG_DIR  = args.config
    try:
        config = configparser.ConfigParser()
        config.read(CONFIG_DIR+"/web-app.conf")
        app['config'] = config
        logging.getLogger().setLevel(config.get("general", "log_level"))
    except Exception:
        logger.exception("Can`t read config file")
        exit(1)
    try:
        with open(CONFIG_DIR+"/schema.json") as schema:
            app['schema'] = json.load(schema)
    except Exception:
        logger.exception("Can`t load schema file")
        exit(1)
    if not os.path.isdir(config["general"]["sounds_dir"]):
        os.makedirs(config["general"]["sounds_dir"])

    app["task_queue"] = asyncio.Queue()
    app["ari_status"] = {"agi_check_time": time.time() - 60,
                         "error": "not ready"}
    app.router.add_get('/status', status)
    app.router.add_post('/ari', ari_handle)
    app.on_startup.append(init)
    app.on_startup.append(start_background_tasks)
    app.on_cleanup.append(close_con)

    try:
        host=app['config']['server']['host']
        port=int(app['config']['server']['port'])
        web.run_app(app, host=host,port=port)
    except KeyboardInterrupt:
        app.shutdown()
        app.cleanup()
        pass
    except Exception:
        app.shutdown()
        app.cleanup()
